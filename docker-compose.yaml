networks:
  e2e:
    name: e2e
    ipam:
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.5.254

services:
  db:
    container_name: db
    networks:
      - e2e
    image: postgres:14
    healthcheck:
      test: pg_isready -U postgres
      interval: 2s
      timeout: 2s
      retries: 10
    ports:
      - "5433:5432"
    environment:
      POSTGRES_PASSWORD: postgres

  consent-api:
    container_name: consent-api
    networks:
      - e2e
    image: "${DOCKER_IMAGE}"
    ports:
      - "8000:80"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - "./client:/home/app/client"
      - "./consent_api:/home/app/consent_api"
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/postgres
      PORT: "80"
      ENV: "${ENV}"
      FLAG_FIXTURES: "True"

  dummy-service-1:
    container_name: dummy-service-1
    networks:
      - e2e
    image: "${DOCKER_IMAGE}"
    ports:
      - "8001:80"
    volumes:
      - "./client:/home/app/client"
      - "./Makefile:/home/app/Makefile"
      - "./consent_api:/home/app/consent_api"
    entrypoint: ["make", "run"]
    environment:
      PORT: "80"
      # CONSENT_API_ORIGIN: "http://consent-api"
      CONSENT_API_ORIGIN: "http://localhost:8000"
      # CONSENT_API_ORIGIN: "http://localhost:3000"
      # CONSENT_API_ORIGIN: "https://expired.badssl.com"
      OTHER_SERVICE_ORIGIN_DOCKER: "http://dummy-service-2"
      OTHER_SERVICE_ORIGIN_HOST: "http://localhost:8002"
      ENV: ${ENV}

  dummy-service-2:
    container_name: dummy-service-2
    networks:
      - e2e
    image: "${DOCKER_IMAGE}"
    ports:
      - "8002:80"
    volumes:
      - "./client:/home/app/client"
      - "./consent_api:/home/app/consent_api"
    entrypoint: ["make", "run"]
    environment:
      CONSENT_API_ORIGIN: "http://localhost:8000"
      PORT: "80"
      OTHER_SERVICE_ORIGIN_DOCKER: "http://dummy-service-1"
      OTHER_SERVICE_ORIGIN_HOST: "http://localhost:8001"
      ENV: ${ENV}


  # express-app:
  #   container_name: express-app
  #   networks:
  #     - e2e
  #   build:
  #     context: ./express-app
  #     dockerfile: .Dockerfile
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - "./express-app:/usr/src/app"



  selenoid-ui:
    profiles:
      - "testing"
    container_name: selenoid-ui
    image: "aerokube/selenoid-ui:latest-release"
    networks:
      - e2e
    links:
      - selenoid
    command: ["--selenoid-uri", "http://selenoid:4444"]
    ports:
      - "8080:8080"

  selenoid:
    profiles:
      - "testing"
    container_name: selenoid
    networks:
      - e2e
    image: "aerokube/selenoid:latest-release"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./selenoid/config:/etc/selenoid/"
      - "$PWD/selenoid/opt:/opt/selenoid/video"
      - "$PWD/selenoid/opt:/opt/selenoid/logs"
    environment:
      OVERRIDE_VIDEO_OUTPUT_DIR: "$PWD/selenoid/opt"
    command: ["-service-startup-timeout", "1m", "-container-network", "e2e"]
    ports:
      - "4444:4444"

  test:
    profiles:
      - "testing"
    container_name: test
    networks:
      - e2e
    image: "${DOCKER_IMAGE}"
    volumes:
      - "$PWD/selenoid/opt:/home/app/logs"
      - "$PWD/Makefile:/home/app/Makefile"
      - "$PWD/consent_api/tests:/home/app/consent_api/tests"
      - "$PWD/.pytest_cache:/home/app/.pytest_cache"
    entrypoint: ["make", "test-all"]
    # entrypoint: ["tail", "-f", "/dev/null"]
    environment:
      ENV: ${ENV}
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/postgres
      E2E_TEST_CONSENT_API_URL: "http://consent-api"
      E2E_TEST_DUMMY_SERVICE_1_URL: "http://dummy-service-1"
      E2E_TEST_DUMMY_SERVICE_2_URL: "http://dummy-service-2"
      SELENIUM_DRIVER: remote
      SELENIUM_REMOTE_URL: http://selenoid:4444/wd/hub/
      SPLINTER_REMOTE_BROWSER_VERSION: "${SPLINTER_REMOTE_BROWSER_VERSION}"
    depends_on:
      - consent-api
      - dummy-service-1
      - dummy-service-2
      - selenoid
